//使用するヘッダーファイル
#include"GameL\DrawTexture.h"
#include"GameL\WinInputs.h"
#include"GameL\SceneManager.h"
#include"GameL\SceneObjManager.h"
#include"GameHead.h"
#include"Block.h"

//使用するネームスペース
using namespace GameL;

//イニシャライズ
void CObjBlock::Init()
{
	m_scroll = 0.0f;
	l_scroll = 0.0f;
	int block_data[10][100] = {
		{ 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,1,1,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0 },
		{ 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1 },
	};
	memcpy(m_map, block_data, sizeof(int)*(10 * 100));
}
//アクション
void CObjBlock::Action()
{
	//主人公の位置を取得
	CObjHero* hero = (CObjHero*)Objs::GetObj(OBJ_HERO);
	float hx = hero->GetX();
	float hy = hero->GetY();

	//後方スクロールライン
	if (hx < 80)
	{
		hero->SetX(80);//主人公はラインを超えないように
		m_scroll -= hero->GetVX();//主人公が本来動く分だけ動かす
	}

	//前方スクロールライン
	if (hx > 300)
	{
		hero->SetX(300);//主人公はラインを超えないように
		m_scroll -= hero->GetVX();//主人公が本来動く分だけ動かす
	}

	//上方スクロールライン
	if (hy < 80)
	{
		hero->SetY(80);//主人公はラインを超えないように
		l_scroll -= hero->GetVY();//主人公が本来動く分だけ動かす
	}

	//下方スクロールライン
	if (hy > 500)
	{
		hero->SetY(500);//主人公はラインを超えないように
		l_scroll -= hero->GetVY();//主人公が本来動く分だけ動かす
	}

	//主人公の衝突状態確認用ﾌﾗｸﾞの初期化
	hero->SetUP(false);
	hero->SetDown(false);
	hero->SetLeft(false);
	hero->SetRight(false);

	//全要素にアクセす
	for (int i = 0; i < 10; i++)
	{
		for(int j=0;j<100;j++)
		if (m_map[i][j] > 0)
		{
			//要素番号を安俵に変更
			float x = j*64.0f;
			float y = i*64.0f;

			//主人公とブロックの当たり判定
			if ((hx + (-m_scroll) +64.0f>x)&&(hx + (-m_scroll)<x+64.0f)&&(hy + (-l_scroll) +64.0f>y)&&(hy + (-l_scroll)<y+64.0f))
			{
				//上下左右判定

				//vectorの作成
				float vx = (hx + (-m_scroll)) - x;
				float vy = (hy + (-l_scroll)) - y;
				//長さを求める
				float len = sqrt(vx*vx + vy*vy);

				//角度を求める
				float r = atan2(vy, vx);
				r = r * 180 / 3.14;
				if (r <= 0.0f)
					r = abs(r);
				else
					r = 360.0f - abs(r);

				//lenがある一定の長さのより短い場合判定に入る
				if (len < 88.0f) {
					//角度で上下左右を判定
					if ((r < 45 && r>0) || r > 315)
					{
						//右
						hero->SetRight(true);//主人公の左の部分が衝突している
						hero->SetX(x + 64.0f+(m_scroll));//ブロックの位置+主人公の幅
						hero->SetVX(-hero->GetVX()*0.1f);//-VX*反発係数
					}
					else if (r > 45 && r < 135)
					{
						//上
						hero->SetDown(true);//主人公から見て下の部分が衝突している
						hero->SetY(y - 64.0f + (l_scroll));//ブロックの位置-主人公の幅
						hero->SetVY(0.0f);
					}
					else if (r > 135 && r < 225)
					{
						//左
						hero->SetLeft(true);//主人公の右の部分が衝突している
						hero->SetX(x - 64.0f+(m_scroll));//ブロックの位置+主人公の幅
						hero->SetVX(-hero->GetVX()*0.1f);//-VX*反発係数
					}
					else if (r > 225 && r < 315)
					{
						//下
						hero->SetUP(true);//主人公から見て上の部分が当たっている
						hero->SetY(y + 64.0f + (l_scroll));//ブロックの位置+主人公の幅
						if (hero->GetVY() < 0)
						{
							hero->SetVY(0.0f);
						}
					}
				}

				//当たってる場合
				//hero->SetX(hx);
				//hero->SetY(0.0f);
				//hero->SetVY(0.0f);
			}
		}
	}
}
//ドロー
void CObjBlock::Draw()
{
	float c[4] = { 1.0f,1.0f,1.0f,1.0f };
	RECT_F src;
	RECT_F dst;

	//背景表示
	src.m_top = 300.0f - (l_scroll/4);
	src.m_left = 100.0f - (m_scroll/4);
	src.m_right = 700.0f - (m_scroll/4);
	src.m_bottom = 1000.0f - (l_scroll/4);
	dst.m_top = 0.0f;
	dst.m_left = 0.0f;
	dst.m_right = 800.0f;
	dst.m_bottom = 800.0f;
	Draw::Draw(2, &src, &dst, c, 0.0f);

	//ブロック表示
	src.m_top = 0.0f;
	src.m_left = 320.0f;
	src.m_right = src.m_left + 64.0f;
	src.m_bottom = 64.0f;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 100; j++)
		{
			if (m_map[i][j] > 0)
			{
				dst.m_top = i*64.0f + l_scroll;
				dst.m_left = j*64.0f + m_scroll;
				dst.m_right = dst.m_left + 64.0f;
				dst.m_bottom = dst.m_top + 64.0f;

				Draw::Draw(1, &src, &dst, c, 0.0f);
			}
		}
	}
}